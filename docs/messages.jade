extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = '消息 | Framework7 Documentation';

block content
  .docs-demo-device
    iframe(width="320", height="548", frameborder="0", scrolling="on")
    .fade-overlay
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content.with-device
      .full-width
        h1 消息
        p 消息组件为你的App提供了可视评论和消息系统。
        h2 消息组件布局
        pre
          code
            | ...   
            | &lt;div class="page"&gt;
            |   &lt;div class="page-content messages-content"&gt;
            |     &lt;div class="messages"&gt;
            |       &lt;!-- 时间戳 --&gt;
            |       &lt;div class="messages-date"&gt;Sunday, Feb 9 &lt;span&gt;12:58&lt;/span&gt;&lt;/div&gt;
            | 
            |       &lt;!-- 发送的消息 (默认为绿色背景，在右边) --&gt;
            |       &lt;div class="message message-sent"&gt;
            |         &lt;!-- Bubble with text --&gt;
            |         &lt;div class="message-text"&gt;Hello&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;!-- 另一条发送的消息 --&gt;
            |       &lt;div class="message message-sent"&gt;
            |         &lt;!-- 文本气泡 --&gt;
            |         &lt;div class="message-text"&gt;How are you?&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;!-- 接收的信息(默认为灰色背景，在左边) --&gt;
            |       &lt;div class="message message-with-avatar message-received"&gt;
            |         &lt;!-- Sender name --&gt;
            |         &lt;div class="message-name"&gt;Kate&lt;/div&gt;
            | 
            |         &lt;!-- 文本气泡 --&gt;
            |         &lt;div class="message-text"&gt;I am fine, thanks&lt;/div&gt;
            | 
            |         &lt;!-- 发送者头像 --&gt;
            |         &lt;div style="background-image:url(http://lorempixel.com/output/people-q-c-100-100-9.jpg)" class="message-avatar"&gt;&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;!-- 另一个时间戳 --&gt;
            |       &lt;div class="messages-date"&gt;Sunday, Feb 3 &lt;span&gt;11:58&lt;/span&gt;&lt;/div&gt;
            | 
            |       &lt;!-- Sent message with image --&gt;
            |       &lt;div class="message message-pic message-sent"&gt;
            |         &lt;!-- Bubble with image --&gt;
            |         &lt;div class="message-text"&gt;&lt;img src="http://lorempixel.com/300/300/"&gt;&lt;/div&gt;
            |         &lt;!-- Message label --&gt;
            |         &lt;div class="message-label"&gt;Delivered 2 days ago&lt;/div&gt;
            |       &lt;/div&gt;
            |     &lt;/div&gt;
            |   &lt;/div&gt;
            | &lt;/div&gt;        
            | ...   

        p 
          b 消息组件的页面布局:
        ul
          li
            p <code>"messages-content"</code> - 消息容器，应该加到"page-content"类上
          li
            p <code>"messages"</code> - 消息气泡的容器，必需
          li
            p <code>"messages-date"</code> - 单个时间戳容器，包含会话日期和时间（在&lt;span&gt;标签中）
          li
            p <code>"message"</code> - 单条消息
        p 
          b 单条消息的内部结构:
        ul
          li
            p <code>"message-name"</code> - 发送者名称
          li
            p <code>"message-text"</code> - 文本气泡
          li
            p <code>"message-avatar"</code> - 发送者头像
          li
            p <code>"message-label"</code> - 气泡下的文本标签
        p 
          b 单条消息容器的一些附加class
        ul
          li
            p <code>"message-sent"</code> - 标识一条被用户发送过的消息，它会位于容器的右侧并且拥有绿色的背景
          li
            p <code>"message-received"</code> - 标识一条被用户接收的消息，它会位于容器的左侧并且拥有灰色的背景
          li
            p <code>"message-pic"</code> - 为单条带&lt;img&gt;的消息添加类，除了image，该条消息不可以包括其他元素
          li
            p <code>"message-with-avatar"</code> - 包含头像
          li
            p <code>"message-with-tail"</code> - 包含一个小尾巴
        p
          b 单条消息的一个附加的class
        ul
          li
            p <code>"message-hide-name"</code> - 隐藏名字
          li
            p <code>"message-hide-avatar"</code> - 隐藏头像
          li
            p <code>"message-hide-label"</code> - 隐藏消息标签
          li
            p <code>"message-last"</code> - 如果这是一个发送者连续会话的最后一条，则带有一个小尾巴并且有更大的底部留白
          li
            p <code>"message-first"</code> - 如果这是一个发送者会话的第一条，则带有发送者的名称
          
        .important-note
          p In such default layout - new messages will appear on bottom of the page. If you need to have new messages on top of the page you need to use <b>newMessagesFirst:true</b> parameter when initializing Messages

        h2 Messages Auto Layout
        h2 消息自动布局
        p Framework7 may add all required additional classes (like "message-pic", "message-with-avatar", "message-with-tail", etc) to each message automatically. For this case we need to use <b>autoLayout:true</b> parameter when initializing Messages
        pre
          code
            | ...   
            |       &lt;div class="messages-date"&gt;Sunday, Feb 9 &lt;span&gt;12:58&lt;/span&gt;&lt;/div&gt;
            | 
            |       &lt;div class="message message-sent"&gt;
            |         &lt;div class="message-text"&gt;Hello&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;div class="message message-sent"&gt;
            |         &lt;div class="message-text"&gt;How are you?&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;div class="message message-received"&gt;
            |         &lt;div class="message-name"&gt;Kate&lt;/div&gt;
            |         &lt;div class="message-text"&gt;I am fine, thanks&lt;/div&gt;
            |         &lt;div style="background-image:url(http://lorempixel.com/output/people-q-c-100-100-9.jpg)" class="message-avatar"&gt;&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       &lt;div class="messages-date"&gt;Sunday, Feb 3 &lt;span&gt;11:58&lt;/span&gt;&lt;/div&gt;
            | 
            |       &lt;div class="message message-sent"&gt;
            |         &lt;div class="message-text"&gt;&lt;img src="http://lorempixel.com/300/300/"&gt;&lt;/div&gt;
            |         &lt;div class="message-label"&gt;Delivered 2 days ago&lt;/div&gt;
            |       &lt;/div&gt;
            | ...   
        p That is all, Framework7 will add all required classes to these messages. You just need to keep "message-sent", "message-received" classes
        
        h2 Initialize Messages with JavaScript
        p Now, when we have Messages' HTML, we need to initialize it. We need to use related App's method:
        .method-wrap
          p
            span.method myApp.messages(<span>messagesContainer</span>, <span>parameters</span>) 
            span - initialize Messages with options
          ul.method-parameters
            li
              span.parameter messagesContainer
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of Messages container HTML element. Required.
            li
              span.parameter parameters
              |  - <span class="parameter-type">object</span> - object with Messages parameters. Optional.
            
            li.method-returns Method returns initialized Messages instance

        p For example:
        pre
          code
            | var myMessages = app.messages('.messages', {
            |     autoLayout: true
            | });   
        .important-note Note that Messages container should be in DOM on a moment of initialization. So if you use it not on home page, you need to initialize it within <b>pageInit</b> <a href="pages.html#page-events">event</a> or <a href="page-callbacks.html">callback</a>
        h2 Messages Parameters
        p Let's look on list of all available parameters:
        table.params-table
          thead
            tr
              th Parameter
              th Type
              th Default
              th Description
          tbody
            tr
              td autoLayout
              td boolean
              td true
              td Enable Auto Layout to add all required additional classes (like "message-pic", "message-with-avatar", "message-with-tail", etc) to each message automatically
            tr
              td newMessagesFirst
              td boolean
              td false
              td Enable if you want to use new messages on top, instead of having them on bottom
            tr
              td messages
              td array
              td
                td Array with initial messages. Each message in array should be presented as object with <a href="#single-message-parameters">message parameters</a>
            tr
              td messageTemplate
              td string
              td * Look bellow
              td Single message Template7 template
        h4 Message Template
        p You can modify message template by passing your custom Template7-formatted template. By default it is:
        pre
          code
            | {{#if day}}
            | &lt;div class="messages-date"&gt;{{day}} {{#if time}}, &lt;span&gt;{{time}}&lt;/span&gt;{{/if}}&lt;/div&gt;
            | {{/if}}
            | &lt;div class="message message-{{type}} {{#if hasImage}}message-pic{{/if}} {{#if avatar}}message-with-avatar{{/if}} message-appear-
            |     {{#if name}}&lt;div class="message-name"&gt;{{name}}&lt;/div&gt;{{/if}}
            |     &lt;div class="message-text"&gt;{{text}}&lt;/div&gt;
            |     {{#if avatar}}&lt;div class="message-avatar" style="background-image:url({{avatar}})"&gt;&lt;/div&gt;{{/if}}
            |     {{#if label}}&lt;div class="message-label"&gt;{{label}}&lt;/div&gt;{{/if}}
            | &lt;/div&gt;            
        h2 Messages Methods & Properties
        p After we initialize Messages we have its initialized instance in variable (like <code>myMessages</code> variable in example above) with helpful methods and properties:
        table.methods-table
          tbody
            tr
              th(colspan="2") Properties
            tr
              td myMessages.params
              td Object with passed initialization parameters 
            tr
              td myMessages.container
              td Dom7 element with messagebar container HTML element.
            tr
              th(colspan="2") Methods
            tr
              td myMessages.addMessage(<span>messageParameters</span>, <span>method</span>, <span>animate</span>);
              td
                p Add new message to the end or to the beginning depending on <b>method</b> parameter
                ul.method-parameters
                  li
                    span.parameter messageParameters
                    |  - <span class="parameter-type">object</span> parameters of message to add. Required.
                  li
                    span.parameter method
                    |  - <span class="parameter-type">string</span> - ('append' or 'prepend') dictates to add new message in the end or in the beginning of messages container. Optional, if not specified, then it will add message depending on <code>newMessagesFirst</code> parameter
                  li
                    span.parameter animate
                    |  - <span class="parameter-type">boolean</span> - (by default <b>true</b>) You may pass here <b>false</b> and message will be added immediately without any transiton and scrolling animation. Optional.
                  
                  li.method-returns Method returns HTMLElement of added messsage
            tr
              td myMessages.appendMessage(<span>messageParameters</span>, <span>animate</span>);
              td Add new message to the end (to the bottom)
            tr
              td myMessages.prependMessage(<span>messageParameters</span>, <span>animate</span>);
              td Add new message to the beginning (to the top)
            tr
              td myMessages.addMessages(<span>messages</span>, <span>method</span>, <span>animate</span>);
              td Add multiple messages per once. 
                ul.method-parameters
                  li
                    span.parameter messages
                    |  - <span class="parameter-type">array</span> with messages to add. Each message in array should be presented as object with <a href="#single-message-parameters">message parameters</a> Required.
                  li.method-returns Method returns array of HTMLElements with added messsages
            tr
              td myMessages.removeMessage(<span>message</span>);
              td Remove message
                ul.method-parameters
                  li
                    span.parameter message
                    |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) of message element to remove. Required
                  li.method-returns Method returns <b>true</b> if specified message was removed
            tr
              td myMessages.removeMessages(<span>messages</span>);
              td Remove multiple messages
                ul.method-parameters
                  li
                    span.parameter messages
                    |  - <span class="parameter-type">array</span> (with HTMLElements) or <span class="parameter-type">string</span> (with CSS Selector) of messages to remove. Required
                  li.method-returns Method returns <b>true</b> if specified messages was removed
            tr
              td myMessages.scrollMessages();
              td Scroll messages to top/bottom depending on newMessagesFirst parameter
            tr
              td myMessages.layout();
              td Apply messages auto layout
            tr
              td myMessages.clean();
              td Clean/remove all the messages
            tr
              td myMessages.destroy();
              td Destroy messages instance
        h3 Single Message Parameters
        p Let's look on single message parameters object that we should use to addMessage, appendMessage and prependMessage methods:
        table.params-table
          thead
            tr
              th 参数
              th 类型
              th 默认
              th 说明
          tbody
            tr
              td text
              td string
              td
              td 消息文本，也可以使用HTML字符串，如果你想要添加图片消息，则应该传递<code>&lt;img src="..."&gt;</code>。<b>必选</b>
            tr
              td name
              td string
              td
              td 发送者名称。<b>可选</b>
            tr
              td avatar
              td string
              td
              td 发送者头像url。<b>可选</b>
            tr
              td type
              td string
              td 'sent'
              td 消息类型，'sent'或'received'。<b>可选</b>
            tr
              td label
              td string
              td
              td Message label. <b>Optional</b>
            tr
              td day
              td string
              td 
              td 日期，例如 - 'Today', 'Monday', 'Yesterday', 'Fri', '22.05.2014'。<b>可选</b>
            tr
              td time
              td string
              td
              td Time string, for example - '22:45', '10:30 AM'. <b>Optional</b>
        h2 Initialize Messages with HTML
        p If you don't need to use Messages methods and properties you can initialize it using HTML without JavaScript. You can do that just by adding additional "messages-init" class to <code>.messages</code>. In this case we may pass required parameters using <b>data-</b> attributes. 
        pre
          code
            | ...   
            |   &lt;div class="page-content messages-content"&gt;
            |     &lt;!-- Additional "messages-init" class--&gt;
            |     &lt;div class="messages messages-init" data-auto-layout="true" data-new-messages-first="false"&gt;
            |       &lt;div class="messages-date"&gt;Sunday, Feb 9 &lt;span&gt;12:58&lt;/span&gt;&lt;/div&gt;
            | 
            |       &lt;div class="message message-sent"&gt;
            |         &lt;div class="message-text"&gt;Hello&lt;/div&gt;
            |       &lt;/div&gt;
            | 
            |       ...
            | 
            |     &lt;/div&gt;
            |   &lt;/div&gt;
            | ...   
        .important-note
          p Parameters that used in camelCase, for example <b>autoLayout</b>, in data- attributes should be used as hypens-case as <b>data-auto-layout</b>
        p 
          b Access to Messages's Instance
        p If you initialize Messages using HTML it is still possible to access to Messages's instance. It is "f7Messages" property of messages's container HTML element:
        pre
          code
            | var myMessages = $$('.messages')[0].f7Messages;
            | 
            | // Now you can use it
            | myMessages.layout();
      h2(data-device-preview="../docs-demos/messages.html") Example
      pre
        code
          | &lt;div class="page toolbar-fixed"&gt;
          |   &lt;div class="page-content messages-content"&gt;
          |     &lt;div class="messages"&gt;
          |       &lt;div class="messages-date"&gt;Sunday, Feb 9 &lt;span&gt;12:58&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="message message-sent"&gt;
          |         &lt;div class="message-text"&gt;Hello&lt;/div&gt;
          |       &lt;/div&gt;
          |       &lt;div class="message message-sent"&gt;
          |         &lt;div class="message-text"&gt;How are you?&lt;/div&gt;
          |       &lt;/div&gt;
          |       &lt;div class="message message-received"&gt;
          |         &lt;div class="message-name"&gt;Kate&lt;/div&gt;
          |         &lt;div class="message-text"&gt;I am fine, thanks&lt;/div&gt;
          |         &lt;div style="background-image:url(http://lorempixel.com/output/people-q-c-100-100-9.jpg)" class="message-avatar"&gt;&lt;/div&gt;
          |       &lt;/div&gt;
          |       &lt;div class="messages-date"&gt;Sunday, Feb 3 &lt;span&gt;11:58&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="message message-sent"&gt;
          |         &lt;div class="message-text"&gt;Nice photo?&lt;/div&gt;
          |       &lt;/div&gt;
          |       &lt;div class="message message-sent message-pic"&gt;
          |         &lt;div class="message-text"&gt;&lt;img src="http://lorempixel.com/300/300/"&gt;&lt;/div&gt;
          |         &lt;div class="message-label"&gt;Delivered&lt;/div&gt;
          |       &lt;/div&gt;
          |       &lt;div class="message message-received"&gt;
          |         &lt;div class="message-name"&gt;Kate&lt;/div&gt;
          |         &lt;div class="message-text"&gt;Wow, awesome!&lt;/div&gt;
          |         &lt;div style="background-image:url(http://lorempixel.com/output/people-q-c-100-100-9.jpg)" class="message-avatar"&gt;&lt;/div&gt;
          |       &lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;
          
      pre
        code
          | var myApp = new Framework7();
          | 
          | var $$ = Dom7;
          | 
          | // 会话flag
          | var conversationStarted = false;
          | 
          | // Init Messages
          | var myMessages = myApp.messages('.messages', {
          |   autoLayout:true
          | });
          | 
          | // Init Messagebar
          | var myMessagebar = myApp.messagebar('.messagebar');
          | 
          | // Handle message
          | $$('.messagebar .link').on('click', function () {
          |   // Message text
          |   var messageText = myMessagebar.value().trim();
          |   // Exit if empy message
          |   if (messageText.length === 0) return;
          | 
          |   // Empty messagebar
          |   myMessagebar.clear()
          | 
          |   // 随机消息类型
          |   var messageType = (['sent', 'received'])[Math.round(Math.random())];
          | 
          |   // 接收的消息的头像和名称
          |   var avatar, name;
          |   if(messageType === 'received') {
          |     avatar = 'http://lorempixel.com/output/people-q-c-100-100-9.jpg';
          |     name = 'Kate';
          |   }
          |   // Add message
          |   myMessages.addMessage({
          |     // Message text
          |     text: messageText,
          |     // 随机消息类型
          |     type: messageType,
          |     // 头像和名称
          |     avatar: avatar,
          |     name: name,
          |     // 日期
          |     day: !conversationStarted ? 'Today' : false,
          |     time: !conversationStarted ? (new Date()).getHours() + ':' + (new Date()).getMinutes() : false
          |   })
          | 
          |   // 更新会话flag
          |   conversationStarted = true;
          | });                
